#user.py
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup  # –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import sqlite3

user_router = Router()

@user_router.message(Command("help"))
async def help_handler(message: types.Message):
    help_text = (
        "ü§ñ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã:\n"
        "/list ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "/export ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n"
        "/broadcast text ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
    )
    await message.answer(help_text)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class RegistrationStates(StatesGroup):
    print(f'user/RegistrationStates/{State()}')
    WAITING_PHONE = State()
    WAITING_USERNAME = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    print(f'user/init_db/{sqlite3.connect('users.db')}')
    with sqlite3.connect('users.db') as conn:
        conn.execute('''CREATE TABLE IF NOT EXISTS users
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      telegram_user_id INTEGER UNIQUE,
                      username TEXT,
                      phone_number TEXT,
                      registration_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                      reminder_sent BOOLEAN DEFAULT FALSE)''')


init_db()


@user_router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    print(f'user/start_handler/{sqlite3.connect('users.db')}')
    user_id = message.from_user.id
    with sqlite3.connect('users.db') as conn:
        print(f'user/start_handler/sqlite3.connect/{sqlite3.connect('users.db')}')
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE telegram_user_id = ?", (user_id,))
        if cursor.fetchone():
            print('user/start_handler/sqlite3.connect/if')
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            return

    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(
        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä üì±",
        request_contact=True
    ))
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´–ë–µ–≥, –ö–æ—Ñ–µ, –¢–∞–Ω—Ü—ã¬ª.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(RegistrationStates.WAITING_PHONE)


@user_router.message(F.contact)
async def contact_handler(message: types.Message, state: FSMContext):
    print('user/contact_handler')
    phone = message.contact.phone_number
    username = message.from_user.username

    if username:
        try:
            with sqlite3.connect('users.db') as conn:
                print('user/contact_handler/if/try/sqlite3.connect')
                conn.execute(
                    "INSERT INTO users (telegram_user_id, username, phone_number) VALUES (?, ?, ?)",
                    (message.from_user.id, username, phone)
                )
            await message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                "–ó–∞ –¥–µ–Ω—å –¥–æ —Å–æ–±—ã—Ç–∏—è –º—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –≤—Å—Ç—Ä–µ—á–µ!",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.clear()
        except sqlite3.IntegrityError:
            await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        await state.update_data(phone_number=phone)
        await message.answer("üìõ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à username –≤—Ä—É—á–Ω—É—é:")
        await state.set_state(RegistrationStates.WAITING_USERNAME)

@user_router.message(RegistrationStates.WAITING_USERNAME)  # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
async def username_handler(message: types.Message, state: FSMContext):
    print('user/username_handler')
    data = await state.get_data()
    try:
        with sqlite3.connect('users.db') as conn:
            print('user/username_handler/try/sqlite3.connect')
            conn.execute(
                "INSERT INTO users (telegram_user_id, username, phone_number) VALUES (?, ?, ?)",
                (message.from_user.id, message.text, data['phone_number'])
            )
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await state.clear()
    except sqlite3.IntegrityError:
        await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")